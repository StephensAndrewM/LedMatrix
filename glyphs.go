package main

// import "fmt"

type Glyph struct {
	Character rune
	Width int
	Layout [][]uint8
}

type GlyphService struct {
	Glpyhs map[rune]Glyph
	Unknown Glyph
}

func (s *GlyphService) Register(c rune, layout [][]uint8) {
	g := Glyph{}
	g.Character = c
	g.Width = len(layout[0])
	g.Layout = layout
	s.Glpyhs[c] = g
}

func NewGlyphService() *GlyphService {

	s := new(GlyphService)
	s.Glpyhs = make(map[rune]Glyph)

	// Uppercase Letters
	s.Register('A', [][]uint8{
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,1,1,1,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1}})
	s.Register('B', [][]uint8{
			{1,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,1,1,1,0}})
	s.Register('C', [][]uint8{
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,0},
			{1,0,0,0,0},
			{1,0,0,0,0},
			{1,0,0,0,1},
			{0,1,1,1,0}})
	s.Register('D', [][]uint8{
			{1,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,1,1,1,0}})
	s.Register('E', [][]uint8{
			{1,1,1,1,1},
			{1,0,0,0,0},
			{1,0,0,0,0},
			{1,1,1,1,0},
			{1,0,0,0,0},
			{1,0,0,0,0},
			{1,1,1,1,1}})
	s.Register('F', [][]uint8{
			{1,1,1,1,1},
			{1,0,0,0,0},
			{1,0,0,0,0},
			{1,1,1,1,0},
			{1,0,0,0,0},
			{1,0,0,0,0},
			{1,0,0,0,0}})
	s.Register('G', [][]uint8{
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,0},
			{1,0,1,1,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{0,1,1,1,0}})
	s.Register('H', [][]uint8{
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,1,1,1,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1}})
	s.Register('I', [][]uint8{
			{1,1,1},
			{0,1,0},
			{0,1,0},
			{0,1,0},
			{0,1,0},
			{0,1,0},
			{1,1,1}})
	s.Register('J', [][]uint8{
			{0,1,1,1},
			{0,0,1,0},
			{0,0,1,0},
			{0,0,1,0},
			{0,0,1,0},
			{1,0,1,0},
			{0,1,0,0}})
	s.Register('K', [][]uint8{
			{1,0,0,0,1},
			{1,0,0,1,0},
			{1,0,1,0,0},
			{1,1,0,0,0},
			{1,0,1,0,0},
			{1,0,0,1,0},
			{1,0,0,0,1}})
	s.Register('L', [][]uint8{
			{1,0,0,0},
			{1,0,0,0},
			{1,0,0,0},
			{1,0,0,0},
			{1,0,0,0},
			{1,0,0,0},
			{1,1,1,1}})
	s.Register('M', [][]uint8{
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,1,0,1,1},
			{1,0,1,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1}})
	s.Register('N', [][]uint8{
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,1,0,0,1},
			{1,0,1,0,1},
			{1,0,0,1,1},
			{1,0,0,0,1},
			{1,0,0,0,1}})
	s.Register('O', [][]uint8{
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{0,1,1,1,0}})
	s.Register('P', [][]uint8{
			{1,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,1,1,1,0},
			{1,0,0,0,0},
			{1,0,0,0,0},
			{1,0,0,0,0}})
	s.Register('Q', [][]uint8{
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,1,0,1},
			{1,0,0,1,0},
			{0,1,1,0,1}})
	s.Register('R', [][]uint8{
			{1,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,1,1,1,0},
			{1,0,1,0,0},
			{1,0,0,1,0},
			{1,0,0,0,1}})
	s.Register('S', [][]uint8{
			{0,1,1,1,1},
			{1,0,0,0,0},
			{1,0,0,0,0},
			{0,1,1,1,0},
			{0,0,0,0,1},
			{0,0,0,0,1},
			{0,1,1,1,0}})
	s.Register('T', [][]uint8{
			{1,1,1,1,1},
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0}})
	s.Register('U', [][]uint8{
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{0,1,1,1,0}})
	s.Register('V', [][]uint8{
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{0,1,0,1,0},
			{0,0,1,0,0}})
	s.Register('W', [][]uint8{
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,1,0,1},
			{1,0,1,0,1},
			{0,1,0,1,0}})
	s.Register('X', [][]uint8{
			{1,0,0,0,1},
			{1,0,0,0,1},
			{0,1,0,1,0},
			{0,0,1,0,0},
			{0,1,0,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1}})
	s.Register('Y', [][]uint8{
			{1,0,0,0,1},
			{1,0,0,0,1},
			{0,1,0,1,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0}})
	s.Register('Z', [][]uint8{
			{1,1,1,1,1},
			{0,0,0,0,1},
			{0,0,0,1,0},
			{0,0,1,0,0},
			{0,1,0,0,0},
			{1,0,0,0,0},
			{1,1,1,1,1}})

	// Numbers
	s.Register('0', [][]uint8{
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{0,1,1,1,0}})
	s.Register('1', [][]uint8{
			{0,1,0,0,0},
			{1,1,0,0,0},
			{0,1,0,0,0},
			{0,1,0,0,0},
			{0,1,0,0,0},
			{0,1,0,0,0},
			{1,1,1,0,0}})
	s.Register('2', [][]uint8{
			{0,2,2,2,0},
			{2,0,0,0,2},
			{0,0,0,0,2},
			{0,0,0,2,0},
			{0,0,2,0,0},
			{0,2,0,0,0},
			{2,2,2,2,2}})
	s.Register('3', [][]uint8{
			{0,1,1,1,0},
			{1,0,0,0,1},
			{0,0,0,0,1},
			{0,0,1,1,0},
			{0,0,0,0,1},
			{1,0,0,0,1},
			{0,1,1,1,0}})
	s.Register('4', [][]uint8{
			{1,0,0,0,0},
			{1,0,0,1,0},
			{1,0,0,1,0},
			{1,0,0,1,0},
			{1,1,1,1,1},
			{0,0,0,1,0},
			{0,0,0,1,0}})
	s.Register('5', [][]uint8{
			{1,1,1,1,1},
			{1,0,0,0,0},
			{1,0,0,0,0},
			{1,1,1,1,0},
			{0,0,0,0,1},
			{1,0,0,0,1},
			{0,1,1,1,0}})
	s.Register('6', [][]uint8{
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,0},
			{1,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{0,1,1,1,0}})
	s.Register('7', [][]uint8{
			{1,1,1,1,1},
			{0,0,0,0,1},
			{0,0,0,1,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0},
			{0,0,1,0,0}})
	s.Register('8', [][]uint8{
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{0,1,1,1,0}})
	s.Register('9', [][]uint8{
			{0,1,1,1,0},
			{1,0,0,0,1},
			{1,0,0,0,1},
			{0,1,1,1,1},
			{0,0,0,0,1},
			{1,0,0,0,1},
			{0,1,1,1,0}})

	// Misc Symbols
	s.Register('/', [][]uint8{
			{0,0,0,0,0},
			{0,0,0,0,1},
			{0,0,0,1,0},
			{0,0,1,0,0},
			{0,1,0,0,0},
			{1,0,0,0,0},
			{0,0,0,0,0}})
	s.Register(':', [][]uint8{
			{0},
			{0},
			{1},
			{0},
			{1},
			{0},
			{0}})
	s.Register('‚ù§', [][]uint8{
			{0,1,1,0,1,1,0},
			{1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1},
			{0,1,1,1,1,1,0},
			{0,0,1,1,1,0,0},
			{0,0,0,1,0,0,0}})
	s.Register(' ', [][]uint8{
			{0,0,0},
			{0,0,0},
			{0,0,0},
			{0,0,0},
			{0,0,0},
			{0,0,0},
			{0,0,0}})

	// Manually set up unknown glyph (checkerboard)
	unknown := Glyph {
		Width: 5,
		Layout: [][]uint8{
			{1,0,1,0,1},
			{0,1,0,1,0},
			{1,0,1,0,1},
			{0,1,0,1,0},
			{1,0,1,0,1},
			{0,1,0,1,0},
			{1,0,1,0,1},
			{0,1,0,1,0}}}
	s.Unknown = unknown

	return s
	
}

func (s *GlyphService) GetGlyph(char rune) Glyph {
	glyph, ok := s.Glpyhs[char]
	// fmt.Println("GlyphService.GetGlyph attempting to find " + string(char))
	if !ok {
		glyph = s.Unknown
	}
	return glyph
}